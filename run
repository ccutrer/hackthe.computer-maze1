#!/usr/bin/env ruby

require 'set'
require_relative 'priority_queue'
#require 'byebug'

class AStar
  def initialize(neighbor_nodes, dist_between, heuristic_cost_estimate)
    @neighbor_nodes = neighbor_nodes
    @dist_between = dist_between
    @heuristic_cost_estimate = heuristic_cost_estimate
  end

  def find_path(start, goal)
    closedset = Set.new
    openset = Containers::PriorityQueue.new
    openset.push(start, -1)
    came_from = {}
    g_score = Hash.new(Float::INFINITY)
    g_score[start] = 0

    while !openset.empty?
      current = openset.pop

      if (current == goal)
        return reconstruct_path(came_from, goal)
      end

      closedset << current
      @neighbor_nodes.call(current).each do |neighbor|
        next if closedset.include?(neighbor)
        tentative_g_score = g_score[current] + 1

        if tentative_g_score < g_score[neighbor]
          came_from[neighbor] = current
          g_score[neighbor] = tentative_g_score
          priority = g_score[neighbor] + @heuristic_cost_estimate.call(neighbor, goal)
          openset.push(neighbor, -priority)
        end
      end
    end
    return nil
  end

  def reconstruct_path(came_from, current)
    total_path = [current]
    while came_from.include?(current)
      current = came_from[current]
      total_path.unshift(current)
    end
    total_path
  end
end


file = $stdin
file = File.open(ARGV.first) unless ARGV.empty?
map = file.readlines.map(&:strip)

sleep 5 if map.first.length >= 233

exit 1

def find(map, target)
  map.each_with_index do |row, i|
    j = row.index(target)
    return [j, i] if j
  end
end

start = find(map, 'F')
finish = find(map, 'S')

adjacency = ->(location) do
  [
    [location.first - 1, location.last],
    [location.first, location.last - 1],
    [location.first + 1, location.last],
    [location.first, location.last + 1]
  ].select do |new_location|
    new_location.first >= 0 && new_location.last >= 0 &&
    new_location.first < map.first.length && new_location.last < map.length &&
    ['S', '-', 'F'].include?(map[new_location.last][new_location.first])
  end
end

cost_func = ->(a, b) { 1 }
distance_func = ->(location, finish) do
  Math.sqrt((finish.last - location.last) ** 2 + (finish.first - location.first) ** 2)
end

astar = AStar.new(adjacency, cost_func, distance_func)

path = astar.find_path(start, finish)

exit unless path

path = path.reverse
path.each_with_index do |now, index|
  next if index == 0
  last = path[index - 1]
  if now.first > last.first
    puts 'E'
  elsif now.last > last.last
    puts 'S'
  elsif now.first < last.first
    puts 'W'
  else
    puts 'N'
  end
end

